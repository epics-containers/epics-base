// For format details, see https://containers.dev/implementors/json_reference/
{
    "name": "epics-containers IOC devcontainer",
    "build": {
        "dockerfile": "../Dockerfile",
        "target": "developer",
        "args": {
            // Native target development settings ==============================
            "EPICS_TARGET_ARCH": "linux-x86_64",
            "BASE_IMAGE": "ubuntu:24.04",
            // Local cross compilation settings ================================
            // "EPICS_TARGET_ARCH": "RTEMS-beatnik",
            // "BASE_IMAGE": "ghcr.io/epics-containers/rtems-beatnik-runtime"
            //
            // We put venv on a different volume to cache so have to copy
            "UV_LINK_MODE": "copy",
            // Do the equivalent of "activate" the venv so we don't have to "uv run" everything
            "PATH": "/workspaces/${localWorkspaceFolderBasename}/.venv/bin:${localEnv:PATH}"
        }
    },
    "remoteEnv": {
        // allows X11 apps to run inside the container
        "DISPLAY": "${localEnv:DISPLAY}",
        // provides a name for epics-containers to use in bash prompt etc.
        "EC_PROJECT": "${localWorkspaceFolderBasename}"
    },
    // IMPORTANT for this devcontainer to work with docker EC_REMOTE_USER must be
    // set to vscode. You will run as vscode with full sudo rights.
    // For podman it should be left blank. You will run as root but host mounts
    // will be owned by your user.
    "remoteUser": "${localEnv:EC_REMOTE_USER}",
    "customizations": {
        "vscode": {
            // Add the IDs of extensions you want installed when the container is created.
            "extensions": [
                "epicsdeb.vscode-epics",
                //
                "ms-python.python",
                "github.vscode-github-actions",
                "tamasfe.even-better-toml",
                "redhat.vscode-yaml",
                "ryanluker.vscode-coverage-gutters",
                "charliermarsh.ruff",
                "ms-azuretools.vscode-docker"
            ],
            "settings": {
                "python.defaultInterpreterPath": "/workspaces/${localWorkspaceFolderBasename}/.venv/bin/python",
                "python.terminal.activateEnvInCurrentTerminal": false,
                "python.terminal.activateEnvironment": false,
                "python.testing.unittestEnabled": false,
                "python.testing.pytestEnabled": true,
                "editor.formatOnSave": true,
                "editor.codeActionsOnSave": {
                    "source.organizeImports": "explicit"
                },
                // "remote.autoForwardPorts": false,
                "[python]": {
                    "editor.defaultFormatter": "charliermarsh.ruff"
                }
            },
        }
    },
    // Populate the user's terminal config folder with default config if it is blank
    "onCreateCommand": "/root/terminal-config/ensure-user-terminal-config.sh",
    // One time global setup commands inside the container
    "postCreateCommand": "bash .devcontainer/postCreateCommand ${devcontainerId}",
    "runArgs": [
        // Allow the container to access the host X11 display and EPICS CA
        "--net=host",
        // Make sure SELinux does not disable write access to host filesystems like tmp
        "--security-opt=label=disable"
    ],
    // Mount the parent of the project folder so we can access peer projects
    "workspaceMount": "source=${localWorkspaceFolder}/..,target=/workspaces,type=bind",
    // mount in other useful files from the host
    "mounts": [
        // we also mount the project folder into a know location in the container
        // this is where the ibek-support and ioc folders reside in the container build
        // in this way the devcontainer and runtime look very similar
        "source=${localWorkspaceFolder},target=/epics/generic-source,type=bind",
        //
        // Mount in the user terminal config folder so it can be edited
        {
            "source": "${localEnv:HOME}/.config/terminal-config",
            "target": "/user-terminal-config",
            "type": "bind"
        },
        // Keep a persistent cross container cache for uv
        {
            "source": "${localEnv:HOME}/.cache/uv",
            "target": "/root/.cache/uv",
            "type": "bind"
        },
        // Use a volume mount for the uv venv so it is local to the container
        {
            "target": "/workspaces/${localWorkspaceFolderBasename}/.venv",
            "type": "volume"
        }
    ]
}